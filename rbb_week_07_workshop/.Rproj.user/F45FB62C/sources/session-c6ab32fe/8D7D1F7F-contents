---
title: "Workshop Exercise: Joining and Pivoting"
author: "YOUR NAME HERE" # Remember to add your name!
---

# Introduction

In this workshop, you'll learn how to clean and analyze HIV and AIDS data across different countries and years. We will start with raw datasets containing estimates of new and total HIV cases per country-year. The goal is to clean and merge these datasets with population data.

Please refer to the lesson notes to aid you in the workshop exercise:

- [Intro to Pivoting Data](https://the-graph-courses.github.io/data_untangled_wp/lessons/ls07_pivoting.html)
- [Intro to Joining Datasets](https://the-graph-courses.github.io/fdar/FDAR_EN_joining_1/FDAR_EN_joining_1.html)

### Step 1: Load Required Libraries

```{r}
if(!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse, here, countrycode)
```

# Data Importation

We will work with two raw datasets, each containing estimates per country-year. These data were accessed from the Gapminder foundation, at [www.gapminder.org/data](https://www.gapminder.org/data).

1. **People living with HIV:** This dataset contains the total number of people currently infected with HIV (*data/hiv_prevalence.csv*).
2. **New HIV infections:** This dataset provides the total number of people newly infected with HIV during a given year (*data/hiv_incidence.csv*).

### Step 2: Load the Datasets

Load the datasets into R using `read_csv()`.

```{r import-data}
# Load raw data from specified paths
total_hiv_raw <- read_csv(here("data/hiv_prevalence.csv"))
new_hiv_raw <- read_csv(here("data/hiv_incidence.csv"))
```

### Step 3: Explore the Datasets

Use functions like `head()`, `View()`, and `summary()` to inspect the datasets. 

# Data Cleaning

Now that we have imported the data, it's time to clean it, starting with transforming the datasets into a more usable format.

## Pivot to Long Format

The datasets are currently in wide format, with each year as a separate column, like this:

| country     | 1990  | 1991  | 1992  | 1993  | 1994  |
|-------------|-------|-------|-------|-------|-------|
| Afghanistan | 600   | 600   | 1000  | 1100  | 1200  |
| Angola      | 33000 | 39000 | 46000 | 54000 | 62000 |
| Argentina   | 27000 | 31000 | 35000 | 39000 | 43000 |
| Armenia     | 350   | 600   | 600   | 600   | 1000  |
| Australia   | 12000 | 12000 | 12000 | 11000 | 11000 |
| Austria     | 600   | 600   | 1000  | 1300  | 1500  |

We need to convert this to long format, where each row represents a single year-country combination. For example:

| country     | year | cases |
|-------------|------|-------|
| Afghanistan | 1990 | 600   |
| Afghanistan | 1991 | 600   |
| Afghanistan | 1992 | 1000  |
| Afghanistan | 1993 | 1100  |
| Afghanistan | 1994 | 1200  |

### Step 4: Pivot New HIV Data

Start with `new_hiv_raw`. Use `pivot_longer()` to reshape the data and store it as a new data frame called `new_hiv_long`. Give your new columns custom names: `year` and `new_cases`.

**Hint:** Use the `names_to` and `values_to` arguments to specify custom column names.

```{r long-format-new}
new_hiv_long <- 
  new_hiv_raw %>% 
  pivot_longer(cols = -c(country, country_code),
               names_to = "year",
               values_to = "new_cases")

new_hiv_long
```

**CHECKPOINT:** After pivoting, you should have columns for `country`, `country_code`, `year`, and `new_cases`.

### Step 5: Pivot Total HIV Data

Now, pivot `total_hiv_raw` and store it as a new data frame called `total_hiv_long`. Give your new columns custom names: `year` and `total_cases`.

```{r long-format-total}
total_hiv_long <- 
  total_hiv_raw %>% 
  pivot_longer(cols = -c(country, country_code),
               names_to = "year",
               values_to = "total_cases")

total_hiv_long
```

**CHECKPOINT:** Verify that `total_hiv_long` now contains columns for `country`, `country_code`, `year`, and `total_cases`, with one row for each country-year combination.

## Joining HIV Data

### Step 6: Join the Datasets

Now that both datasets are in long format we can join them. Note that you need to use the `country`, `country_code`, and `year` columns as the keys. (`by = c("country", "country_code", "year")`)

Use `full_join()` so that we can keep as much information as possible.

```{r join-datasets}
# Join the new and total HIV datasets
hiv_data_combined <- 
  full_join(total_hiv_long,
            new_hiv_long, 
            by = c("country", "country_code", "year"))

hiv_data_combined
```

**CHECKPOINT:** The combined dataset should have columns for `country`, `country_code`, `year`, `total_cases`, and `new_cases`.

## Add Population Data

The `world_bank_pop` dataset from **tidyr** contains information on population per year from 2000 to 2017.

### Step 7: Explore World Bank Population Data

First, take a look at the dataset:

```{r}
tidyr::world_bank_pop
```

### Step 8: Filter and Pivot Population Data

Filter to just the `SP.POP.TOTL` indicator, then pivot the data to a long format. Rename the "country" column to "country_code" so that we can join it properly later on. Store the result as `population_long`.

```{r pivot-population-data}
population_long <- 
  tidyr::world_bank_pop %>% 
  filter(indicator == "SP.POP.TOTL") %>% 
  pivot_longer(cols = starts_with("20"),
               names_to = "year",
               values_to = "population") %>% 
  select(country_code = country, year, population)

population_long
```

### Step 9: Join Population Data with HIV Data

Use `left_join()` to add this to your `hiv_data_combined` variable (the HIV data combined should be the left or primary dataset). You should  use both "country_code" and "year" as keys (by = .c(bla bla))

```{r join-population-data}
hiv_data_combined <- 
  hiv_data_combined %>% 
  left_join(population_long, by = c("country_code", "year"))

hiv_data_combined
```

**CHECKPOINT:** Verify that `hiv_data_combined` now contains a `population` column.

## Calculate Incidence Rate and Prevalence Rate

Now, calculate the incidence rate and prevalence rate:

- **Incidence Rate** = (New Cases / Population) * 100,000
- **Prevalence Rate** = (Total Cases / Population) * 100,000

### Step 10: Calculate Rates

```{r calculate-rates}
hiv_data_combined <- 
  hiv_data_combined %>% 
  mutate(
    incidence_rate = (new_cases / population) * 100000,
    prevalence_rate = (total_cases / population) * 100000
  )

hiv_data_combined
```

## Plotting Data

### Step 11: Plot Incidence Rate for Selected Countries

Select 3 countries of your choice and plot the incidence rate over time for them.

```{r plot-incidence-rate}
# Replace 'Country1', 'Country2', 'Country3' with actual country names
selected_countries <- c("South Africa", "Nigeria", "India") # Example countries

hiv_data_combined %>% 
  filter(country %in% selected_countries) %>% 
  ggplot(aes(x = as.numeric(year), y = incidence_rate, color = country)) +
  geom_line() +
  labs(title = "HIV Incidence Rate Over Time",
       x = "Year",
       y = "Incidence Rate (per 100,000 population)")
```

### Step 12: Plot Prevalence Rate Over Time

Similarly, plot the prevalence rate over time for those same countries.

```{r plot-prevalence-rate}
hiv_data_combined %>% 
  filter(country %in% selected_countries) %>% 
  ggplot(aes(x = as.numeric(year), y = prevalence_rate, color = country)) +
  geom_line() +
  labs(title = "HIV Prevalence Rate Over Time",
       x = "Year",
       y = "Prevalence Rate (per 100,000 population)")
```

## Optional Ungraded Challenge

### Step 13: Add Regional Information from the `countrycode` Package

First, get regional information

```{r get-continent-data}
country_continents <- 
  countrycode::codelist %>% 
  select(iso3c, continent)

country_continents
```

### Step 14: Merge Continent Data

Merge the continent data with your `hiv_data_combined` dataset.

```{r merge-continent-data}
hiv_data_combined <- 
  hiv_data_combined %>% 
  left_join(country_continents, by = c("country_code" = "iso3c"))

hiv_data_combined
```

### Step 15: Identify Countries with Highest Prevalence Rate in 2011 per Continent

Create a data subset with just the countries that had the highest prevalence rate in 2011 for each continent.

```{r highest-prevalence}
highest_prevalence_2011 <- 
  hiv_data_combined %>% 
  filter(year == "2011") %>% 
  group_by(continent) %>% 
  filter(prevalence_rate == max(prevalence_rate, na.rm = TRUE)) %>% 
  ungroup()

highest_prevalence_2011
```

### Step 16: Make a Bar Chart Comparing 2011 Prevalence Rates

```{r bar-chart-prevalence}
highest_prevalence_2011 %>% 
  ggplot(aes(x = reorder(country, -prevalence_rate), y = prevalence_rate, fill = continent)) +
  geom_col() +
  coord_flip() +
  labs(title = "Highest HIV Prevalence Rates in 2011 by Continent",
       x = "Country",
       y = "Prevalence Rate (per 100,000 population)")
```
