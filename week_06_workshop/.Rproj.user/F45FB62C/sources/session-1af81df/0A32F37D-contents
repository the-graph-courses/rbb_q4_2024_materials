---
title: "Workshop 6: Grouping, Summarizing and Plotting"
output: prettydoc::html_pretty
author: "AUTHORS NAME HERE"
---

# Data Preparation

## Load Packages

To get started, **load in the needed packages**: {tidyverse}, {here}, {janitor}, and {esquisse}.

```{r}
pacman::p_load(tidyverse, here, janitor, esquisse)
```

## Import Data

Now, **read the dataset into R**. The data frame you import should have 880 rows and 21 columns. Remember to use the `here()` function to allow your Rmd to use project-relative paths.

```{r}
# Import CSV
tb_raw <- read_csv(here("data/india_tuberculosis.csv"))

# Make sure imported data looks OK and familiarize yourself with the variables
head(tb_raw)
```

## Clean Column Names

The names of many columns in this dataset have spaces and symbols in them (e.g., `Treatment initiation delay (in days)`), which is not R-friendly.

Use `janitor::clean_names()` to give your variable names a clean and consistent format.

```{r}
# Clean variable names
tb <- tb_raw %>% clean_names()
```

**Checkpoint**: The data frame should contain 880 rows and 21 columns. Column/variable names should now be converted to snake case. You can run `names(tb)` to print and check the variable names.

## Calculate Total Cost

Each patient record notes the location and cost of up to three locations. Add together these costs (`first_visit_cost`, `second_visit_cost`, and `third_visit_cost`) to create a `total_cost` variable.

```{r}
tb <- tb %>%
  mutate(total_cost = first_visit_cost + second_visit_cost + third_visit_cost)
```

# Investigating Healthcare Costs by Education Level


## Reorder Education Levels

Before moving further, let's take a closer look at the `education` variable in our dataset:

```{r}
# count() lets you quickly count the unique values of variables
tb %>%
  count(education)
```

You'll notice that education levels are ordered alphabetically by default! However, in this case, it would be more useful to reorder the education levels so that they are arranged in a chronological order.

Complete the code below to reorder the education levels:

```{r}
tb <- tb %>%
  mutate(education = factor(education,
    levels = c(
      "No Education",
      "Primary",
      "Middle",
      "Secondary",
      "Higher Secondary",
      "Graduate",
      "Graduate & Above",
      "Missing"
    )
  ))
```

We will use the newly transformed `education` variable for grouping, summarizing, and plotting below.

## Table of Costs by Education Level

Let's compare the cost of treatment at different health facilities using a summary table. Use `{dplyr}` verbs to group by education level and create a summary table with two variables:

-   The number of patients in each education level
-   The mean total cost for each education level

Store the resulting tibble as an object called `edu_cost_table`.

```{r}
edu_cost_table <- tb %>%
  group_by(education) %>%
  summarise(
    n = n(),
    mean_cost = mean(total_cost, na.rm = TRUE)
  )

edu_cost_table
```

Reorder the rows of the summary table to go from highest to lowest mean cost.

```{r}
edu_cost_table %>%
  arrange(desc(mean_cost))
```

Write an interpretation of the summary table. (Do people with more education spend more on healthcare?) Later, we will visualize the data with a plot. 

## Visualize Costs by Education Level

Using `esquisser()` and the costs summary table you created earlier, create a bar plot of mean costs, by education level.

```{r}
# esquisser(edu_cost_table)

ggplot(edu_cost_table, aes(x = education, y = mean_cost)) +
  geom_col()
```

When you are satisfied with your plot, use `ggsave()` to save your plot above in a new folder called "outputs". Remember to specify the file type and dimensions of the image you want to export.

```{r}
# Save your plot(s)
ggsave(here("outputs/edu_cost_plot.png"), width = 6, height = 4)
```

# Investigating Healthcare Costs by Age Group

## Create an `age_group` Variable

The `age` variable records the age of each patient in years. We want to classify the patients into four approximately equally-sized age groups for further analysis.

First, determine the quantiles of the `age` variable to decide the cutoffs for each age group:

```{r}
quantile(tb$age)
```

Based on the quantiles, create a new `age_group` variable with the following categories:

- 18-36
- 37-47
- 48-57
- 58+

Use `mutate()` and `case_when()` to create the `age_group` variable. Save the updated dataset as `tb`.

```{r}
tb <- tb %>%
  mutate(age_group = case_when(
    age >= 18 & age <= 36 ~ "18-36",
    age >= 37 & age <= 47 ~ "37-47",
    age >= 48 & age <= 57 ~ "48-57",
    age >= 58 ~ "58+"
  ))
```

Now, check if we met our goal of having a similar number of patients in each age group:

```{r}
# Tabulate age groups
tb %>% tabyl(age_group)
```

**Checkpoint**: If you classified the age groups correctly, you will see that each age group has approximately 24-36% of the patients.

## Table of Costs by Age Group

Next, summarize the total healthcare costs by age group. Use `{dplyr}` verbs to group by `age_group` and create a summary table with two variables:

- The number of patients in each age group
- The mean total cost for each age group

Store the resulting tibble as an object called `age_cost_table`.

```{r}
age_cost_table <- tb %>%
  group_by(age_group) %>%
  summarise(
    n = n(),
    mean_cost = mean(total_cost, na.rm = TRUE)
  )

age_cost_table
```

Reorder the rows of the summary table to go from highest to lowest mean cost:

```{r}
age_cost_table %>%
  arrange(desc(mean_cost))
```

**Interpretation**: Analyze the summary table to determine if there's a trend in healthcare costs across different age groups. For example, do older patients tend to spend more on healthcare?

## Visualize Costs by Age Group

Using `esquisser()` and the costs summary table you created earlier, create a bar plot of mean costs by age group.

```{r}
ggplot(age_cost_table) +
  geom_col(aes(x = age_group, y = mean_cost))
```

When you are satisfied with your plot, use `ggsave()` to save your plot in a new folder called "outputs". Remember to specify the file type and dimensions of the image you want to export.

```{r}
# Save your plot(s)
ggsave(here("outputs/age_cost_plot.png"), width = 6, height = 4)
```


# Wrap Up

That's it for this assignment! We will choose some people to present their work during the workshop. If you would like to share your results with the class, please let an instructor know.

The group representative should prepare to screenshare and give a short (3-4 sentence) presentation.

Choose and highlight one aspect of your code or plot that would be helpful and interesting to the class. For example, you can choose a question that your group found especially tricky, and explain how you found the solution. Or you can display one of your plots, and share some tips for additional customization.


# Bonus Challenge (Optional and Ungraded)

If you finish early and have extra time, you can explore and transform the dataset further.

We can look at two types of health facilities in the dataset: private and public (government).

```{r}
# List of 9 healthcare locations
tb %>% count(first_visit_location)
```

Note: PHC = primary health center, GH = govt hospital etc.

## Comparing Delays in Public vs Private Health Facilities

Let's create a new variable indicating whether a healthcare location is private or public. We can do this using the `str_detect()` function from the `{stringr}` package of tidyverse.

```{r}
tb <- tb %>%
  mutate(first_visit_type = case_when(
    str_detect(first_visit_location, "Pvt") ~ "Private",
    TRUE ~ "Public"
  ))
```

Inspect the new variable in `tb`.

Your assignment for this challenge is to summarize delays in treatment, and compare the length of delays between private and public health facilities.

You can start by making summary table of `treatment_initiation_delay_in_days` or `health_sys_delay_in_days`, grouped by `first_visit_type`. Then visualize the data and draw insights from your findings.
